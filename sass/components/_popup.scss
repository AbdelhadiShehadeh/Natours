.popup {
  width: 100%;
  height: 100vh;
  position: fixed;
  top: 0;
  left: 0;
  background-color: rgba($color-black, 0.8);
  z-index: 9999;
  visibility: hidden;
  opacity: 0;
  //We use 'opacity' here so we can animate the 'section' to go from 'opacity:0 to opacity:1'.
  //'display' property can't be animated("There is nothing to animate").
  transition: all 0.3s;
  &:target {
    //':target' since this class has an 'id' and another element links to it, means that it has access to the 'target' pseudo class. So basically the properties within the pseudo class will be executed when the section ("with the target pseudo class") gets called.
    //'target' pseudo class requires a unique 'id' specified to it("in this example 'id="popup"') and somewhere in the html should be a link that links to it("so it will be called in order for it to actually work.").
    opacity: 1;
    visibility: visible;
  }
  &__close {
    &:link,
    &:visited {
      color: $color-gray-dark;
      position: absolute;
      //Since the element parent("popup__right") has no specified position. the ("popup__close") will be positioned relative to its grandparent element("popup__content").
      top: 2.5rem;
      right: 2.5rem;
      font-size: 3rem;
      text-decoration: none;
      display: inline-block;
      //By default 'HTML entities' are displayed as a block.
      transition: all 0.2s;
      line-height: 1;
      //'HTML' entities are treated as fonts. and as we predefined the 'line-height' before to 1.7 we need to reset it here back to 1 ("the original value").
    }
    &:hover {
      color: $color-primary;
    }
  }
  &__content {
    @include absCenter;
    width: 75%;
    background-color: $color-white;
    box-shadow: 0 2rem 4rem rgba($color-black, 0.2);
    border-radius: 3px;
    overflow: hidden;
    display: table;
    //We considered the whole section as a table with two cells in it("left cell which contains the images and the right cell which contain the text.
    //We didn't use the 'float' method here because we want to maintain the height of the two cells and be able to middle align the 'right' cell using 'vertical-align: middle'.
    //'display: table' it treats the section layout as a table with cells inside it.
    opacity: 0;
    transform: translate(-50%, -50%) scale(0.25);
    //This animation will make the user feel like the 'popup' is coming from the screen to him.
    //We needed to redefine the 'translate' here because this transform will take precedence over the previous one ("which is in the 'mixin' and is used to center the 'popup'.
    transition: all 0.5s 0.2s;
    //transition: properties  duration animation-delay.
    //The 'animation-delay' here will allow for the background to first come out from the 'popup' class properties and then the 'scale' animation will happen after the '0.2s' delay("This will make the animation looks nicer").
  }
  &:target &__content {
    opacity: 1;
    transform: translate(-50%, -50%) scale(1);
  }
  &__left {
    width: 33.33333333%;
    display: table-cell;
    //This section will be considered as a cell in the main table("In this example its a cell in the 'popup__content' table").
    //In order to use 'table-cell' value we need to set the parent container to 'display: table'.
  }
  &__right {
    width: 66.66666667%;
    display: table-cell;
    vertical-align: middle;
    //'vertical-align: middle' means that will align the content of the cell vertically to the middle of the whole cell.
    //'vertical-align' This property needs to be defined inside a 'table-cell'.
    padding: 3rem 5rem;
  }
  &__img {
    display: block;
    width: 100%;
    //100% of its parent's width ("in this case the class 'popup__left'").
  }
  &__text {
    font-size: 1.4rem;
    margin-bottom: 4rem;
    column-count: 2;
    //'column-count' Basically allows you to split the text into columns.
    column-gap: 4rem;
    /*
    'column-gap' by default is set to '1em' which in this case 
    1em = (1 x this section 'font-size')
    1em = (1 x 14) = 14px.
    */
    column-rule: 1px solid $color-gray-light-2;
    //'column-rule' will create a line between each column.
    -moz-hyphens: auto;
    -ms-hyphens: auto;
    -webkit-hyphens: auto;
    hyphens: auto;
    //'hyphens' will create a (-) between the words that are breaking into two lines.
    //In order for the 'hyphens' property to work we need to specify the 'lang' in the html("In this project since its content is in the english language we specified '<html land = "en"> in the 'html' tag.
  }
}
